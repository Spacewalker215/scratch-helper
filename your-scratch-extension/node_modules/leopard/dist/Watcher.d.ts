import Color from "./Color";
type WatcherValue = string | number | boolean | null | undefined | (string | number | boolean | null | undefined)[];
type WatcherStyle = "normal" | "large" | "slider";
type WatcherOptions = {
    value?: () => WatcherValue;
    setValue?: (value: number) => void;
    label: string;
    style?: WatcherStyle;
    visible?: boolean;
    color?: Color;
    step?: number;
    x?: number;
    y?: number;
    width?: number;
    height?: number;
    min?: number;
    max?: number;
};
export default class Watcher {
    value: () => WatcherValue;
    setValue: (value: number) => void;
    private _previousValue;
    private color;
    private _label;
    private _x;
    private _y;
    private _width;
    private _height;
    private _min;
    private _max;
    private _step;
    private _style;
    private _visible;
    private _dom;
    constructor({ value, setValue, label, style, visible, color, step, min, max, x, y, width, height, }: WatcherOptions);
    private initializeDOM;
    updateDOM(renderTarget: HTMLElement | null): void;
    get visible(): boolean;
    set visible(visible: boolean);
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get width(): number | undefined;
    set width(width: number | undefined);
    get height(): number | undefined;
    set height(height: number | undefined);
    get style(): WatcherStyle;
    set style(style: WatcherStyle);
    get min(): number;
    set min(min: number);
    get max(): number;
    set max(max: number);
    get step(): number;
    set step(step: number);
    get label(): string;
    set label(label: string);
}
export {};
