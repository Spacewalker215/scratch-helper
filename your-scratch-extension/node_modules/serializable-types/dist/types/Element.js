"use strict";

var decorateTypeDef = require("../decorateTypeDef");

module.exports = decorateTypeDef({
  description: "Element | TextNode",
  serializedDescription: '{ $type: "TextNode", $value: string } | { $type: "Element", $value: { element: { tagName: string, namespaceURI: ?string }, attributes: Array<{ namespaceURI: ?string, name: string, value: string }>, children: Array } }',
  check: function check(val) {
    return val instanceof global.Node && (val.nodeType === 1 || val.nodeType === 3);
  },
  serialize: function serialize(node) {
    var _this = this;

    if (node instanceof Element) {
      return {
        $type: "Element",
        $value: {
          element: {
            tagName: node.tagName,
            namespaceURI: node.namespaceURI
          },
          attributes: Array.from(node.attributes).map(function (_ref) {
            var namespaceURI = _ref.namespaceURI,
                name = _ref.name,
                value = _ref.value;
            return {
              namespaceURI: namespaceURI,
              name: name,
              value: value
            };
          }),
          children: Array.from(node.childNodes).map(function (child) {
            return _this.serialize(child);
          })
        }
      };
    } else {
      return {
        $type: "TextNode",
        $value: node.nodeValue
      };
    }
  },
  checkSerialized: function checkSerialized(serialized) {
    return serialized.$type === "Element" || serialized.$type === "Node";
  },
  deserialize: function deserialize(serialized) {
    var _this2 = this;

    var document = global.document;

    if (document == null) {
      throw new Error("Cannot deserialize an Element without a global document in scope");
    }

    if (typeof serialized.$value === "string") {
      return document.createTextNode(serialized.$value);
    } else {
      var _serialized$$value = serialized.$value,
          element = _serialized$$value.element,
          attributes = _serialized$$value.attributes,
          children = _serialized$$value.children;
      var el;

      if (element.namespaceURI != null) {
        el = document.createElementNS(element.namespaceURI, element.tagName);
      } else {
        el = document.createElement(element.tagName);
      }

      attributes.forEach(function (_ref2) {
        var namespaceURI = _ref2.namespaceURI,
            name = _ref2.name,
            value = _ref2.value;

        if (namespaceURI != null) {
          el.setAttributeNS(namespaceURI, name, value);
        } else {
          el.setAttribute(name, value);
        }
      });
      children.forEach(function (child) {
        return el.appendChild(_this2.deserialize(child));
      });
      return el;
    }
  }
});