"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var decorateTypeDef = require("../decorateTypeDef");

module.exports = decorateTypeDef({
  description: "Symbol",
  serializedDescription: '{ $type: "Symbol", $value: string }',
  check: function check(val) {
    return _typeof(val) === "symbol";
  },
  serialize: function serialize(val) {
    var key = Symbol.keyFor(val);

    if (key == null) {
      throw new Error("Can only serialize symbols from the global symbol registry.");
    }

    return {
      $type: "Symbol",
      $value: key
    };
  },
  checkSerialized: function checkSerialized(serialized) {
    return serialized.$type === "Symbol";
  },
  deserialize: function deserialize(serialized) {
    return Symbol.for(serialized.$value);
  }
});