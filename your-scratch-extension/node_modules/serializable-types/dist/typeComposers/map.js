"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var decorateTypeDef = require("../decorateTypeDef");

module.exports = function map(keyDef, valueDef) {
  return decorateTypeDef({
    description: "Map<".concat(keyDef.description, ", ").concat(valueDef.description, ">"),
    serializedDescription: "{ $type: \"Map\", $value: Array<[".concat(keyDef.serializedDescription, ", ").concat(valueDef.serializedDescription, "]> }"),
    check: function check(val) {
      return val instanceof Map && Array.from(val).every(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        return keyDef.check(key) && valueDef.check(value);
      });
    },
    serialize: function serialize(map) {
      return {
        $type: "Map",
        $value: Array.from(map).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              key = _ref4[0],
              val = _ref4[1];

          return [keyDef.serialize(key), valueDef.serialize(val)];
        })
      };
    },
    checkSerialized: function checkSerialized(serialized) {
      return serialized.$type === "Map" && serialized.$value.every(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            serializedKey = _ref6[0],
            serializedVal = _ref6[1];

        return keyDef.checkSerialized(serializedKey) && valueDef.checkSerialized(serializedVal);
      });
    },
    deserialize: function deserialize(serialized) {
      var map = new Map();
      serialized.$value.forEach(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            serializedKey = _ref8[0],
            serializedValue = _ref8[1];

        map.set(keyDef.deserialize(serializedKey), valueDef.deserialize(serializedValue));
      });
      return map;
    }
  });
};