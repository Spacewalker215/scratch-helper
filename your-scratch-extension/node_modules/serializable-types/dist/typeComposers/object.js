"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var decorateTypeDef = require("../decorateTypeDef");

module.exports = function object(objectDef) {
  var entries = Object.entries(objectDef);
  return decorateTypeDef({
    description: "{ ".concat(entries.map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          typeDef = _ref2[1];

      return "".concat(key, ": ").concat(typeDef.description);
    }).join(", "), " }"),
    serializedDescription: "{ $type: \"object\", $value: { ".concat(entries.map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          typeDef = _ref4[1];

      return "".concat(key, ": ").concat(typeDef.serializedDescription);
    }).join(", "), " } }"),
    check: function check(val) {
      return val != null && _typeof(val) === "object" && entries.every(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            key = _ref6[0],
            typeDef = _ref6[1];

        return typeDef.check(val[key]);
      });
    },
    serialize: function serialize(obj) {
      var value = {};
      entries.forEach(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            key = _ref8[0],
            typeDef = _ref8[1];

        value[key] = typeDef.serialize(obj[key]);
      });
      return {
        $type: "object",
        $value: value
      };
    },
    checkSerialized: function checkSerialized(serialized) {
      if (serialized.$type !== "object") {
        return false;
      }

      var serializedEntries = Object.entries(serialized.$value);
      return serializedEntries.every(function (_ref9) {
        var _ref10 = _slicedToArray(_ref9, 2),
            key = _ref10[0],
            serializedValue = _ref10[1];

        return objectDef[key] && objectDef[key].checkSerialized(serializedValue);
      });
    },
    deserialize: function deserialize(serialized) {
      var value = {};
      entries.forEach(function (_ref11) {
        var _ref12 = _slicedToArray(_ref11, 2),
            key = _ref12[0],
            typeDef = _ref12[1];

        value[key] = typeDef.deserialize(serialized.$value[key]);
      });
      return value;
    }
  });
};