"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var decorateTypeDef = require("../decorateTypeDef");

var union = require("./union");

var stringDef = require("../types/string");

var symbolDef = require("../types/Symbol");

module.exports = function objectMap(valueType) {
  var keyType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : union(stringDef, symbolDef);
  return decorateTypeDef({
    description: "{ [".concat(keyType.description, "]: ").concat(valueType.description, " }"),
    serializedDescription: "{ $type: \"objectMap\", $value: Array<[".concat(keyType.description, ", ").concat(valueType.description, "]> }"),
    check: function check(val) {
      return val != null && _typeof(val) === "object" && Object.entries(val).every(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            val = _ref2[1];

        return keyType.check(key) && valueType.check(val);
      });
    },
    serialize: function serialize(obj) {
      return {
        $type: "objectMap",
        $value: Object.entries(obj).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              key = _ref4[0],
              val = _ref4[1];

          return [keyType.serialize(key), valueType.serialize(val)];
        })
      };
    },
    checkSerialized: function checkSerialized(serialized) {
      if (serialized.$type !== "objectMap") {
        return false;
      }

      return serialized.$value.every(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            key = _ref6[0],
            val = _ref6[1];

        return keyType.checkSerialized(key) && valueType.checkSerialized(val);
      });
    },
    deserialize: function deserialize(serialized) {
      var obj = {};
      serialized.$value.forEach(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            serializedKey = _ref8[0],
            serializedValue = _ref8[1];

        var key = keyType.deserialize(serializedKey);
        var val = valueType.deserialize(serializedValue);
        obj[key] = val;
      });
      return obj;
    }
  });
};