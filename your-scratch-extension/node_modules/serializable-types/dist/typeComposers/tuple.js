"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var decorateTypeDef = require("../decorateTypeDef");

module.exports = function tuple() {
  for (var _len = arguments.length, memberDefs = new Array(_len), _key = 0; _key < _len; _key++) {
    memberDefs[_key] = arguments[_key];
  }

  return decorateTypeDef({
    description: "[".concat(memberDefs.map(function (typeDef) {
      return typeDef.description;
    }).join(", "), "]"),
    serializedDescription: "[".concat(memberDefs.map(function (typeDef) {
      return typeDef.description;
    }).join(", "), "]"),
    check: function check(val) {
      return val != null && _typeof(val) === "object" && memberDefs.length === val.length && memberDefs.every(function (typeDef, index) {
        return typeDef.check(val[index]);
      });
    },
    serialize: function serialize(tuple) {
      return {
        $type: "tuple",
        $value: Array.from(tuple).map(function (member, index) {
          return memberDefs[index].serialize(member);
        })
      };
    },
    checkSerialized: function checkSerialized(serialized) {
      return serialized.$type === "tuple" && serialized.$value.length === memberDefs.length && serialized.$value.every(function (serializedValue, index) {
        var typeDef = memberDefs[index];
        return typeDef.checkSerialized(serializedValue);
      });
    },
    deserialize: function deserialize(serialized) {
      return serialized.$value.map(function (serializedValue, index) {
        var typeDef = memberDefs[index];
        return typeDef.deserialize(serializedValue);
      });
    }
  });
};