/*
This file was generated by the run-on-server babel plugin. It should not
be edited by hand.
*/ module.exports = {
  "35ec85b2e873eb1fdd40191a99741403": (name, serializedArgs) => {
    const fs = require("fs");

    const pify = require("pify");

    const { simpleMethods } = require("./defs");

    const args = simpleMethods[name].args.deserialize(serializedArgs);
    const fsp = pify(fs);
    return fsp[name](...args).then(result => {
      return simpleMethods[name].result.serialize(result);
    });
  },
  // "undefined": err,
  "429a59b948cfa8ba04da65da32a0b085": (name, serializedArgs) => {
    const fs = require("fs");

    const { simpleMethods } = require("./defs");

    const args = simpleMethods[name].args.deserialize(serializedArgs);
    const result = fs[name](...args);
    return simpleMethods[name].result.serialize(result);
  },
  "48fdbc39f449faa3e394483730e75a07": serializedArgs => {
    const fs = require("fs");

    const { specialMethods } = require("./defs");

    const args = specialMethods.exists.args.deserialize(serializedArgs);
    return new Promise(resolve => {
      fs.exists(...args, exists => {
        resolve(exists);
      });
    });
  },
  "16170afb9f825f9edfc661c293a4bca0": serializedArgs => {
    const fs = require("fs");

    const websocketStreamServer = require("websocket-stream/stream");

    const createSocketUrl = require("run-on-server/socket");

    const { specialMethods } = require("./defs");

    const args = specialMethods.createReadStream.args.deserialize(
      serializedArgs
    );
    return createSocketUrl(socket => {
      const readStream = fs.createReadStream(...args);
      const socketStream = websocketStreamServer(socket, {
        binary: true
      });
      readStream.pipe(socketStream);
    });
  },
  "3c01fb224d1358601aeb055dc110de42": serializedArgs => {
    const fs = require("fs");

    const websocketStreamServer = require("websocket-stream/stream");

    const createSocketUrl = require("run-on-server/socket");

    const { specialMethods } = require("./defs");

    const args = specialMethods.createWriteStream.args.deserialize(
      serializedArgs
    );
    return createSocketUrl(socket => {
      const writeStream = fs.createWriteStream(...args);
      const socketStream = websocketStreamServer(socket, {
        binary: true
      });
      socketStream.pipe(writeStream);
    });
  },
  "47f78a458db4f3fcaacdb2fe5b99ce44": (name, serializedArgs) => {
    const fs = require("fs");

    const pify = require("pify");

    const { specialMethods } = require("./defs");

    const args = specialMethods[name].args.deserialize(serializedArgs);
    const fsp = pify(fs);
    return fsp[name](...args).then(stats => {
      return Object.assign({}, stats, {
        _isBlockDevice: stats.isBlockDevice(),
        _isCharacterDevice: stats.isCharacterDevice(),
        _isDirectory: stats.isDirectory(),
        _isFIFO: stats.isFIFO(),
        _isFile: stats.isFile(),
        _isSocket: stats.isSocket(),
        _isSymbolicLink: stats.isSymbolicLink()
      });
    });
  },
  "7f39ad5fb60da59c463f60102c2955d8": (name, serializedArgs) => {
    const fs = require("fs");

    const { specialMethods } = require("./defs");

    const args = specialMethods[name].args.deserialize(serializedArgs);
    const stats = fs[name](...args);
    return Object.assign({}, stats, {
      _isBlockDevice: stats.isBlockDevice(),
      _isCharacterDevice: stats.isCharacterDevice(),
      _isDirectory: stats.isDirectory(),
      _isFIFO: stats.isFIFO(),
      _isFile: stats.isFile(),
      _isSocket: stats.isSocket(),
      _isSymbolicLink: stats.isSymbolicLink()
    });
  },
  "5d9cb1b309f85aa33d6fad8c866ea8a4": serializedArgs => {
    const fs = require("fs");

    const { specialMethods } = require("./defs");

    const args = specialMethods.read.args.deserialize(serializedArgs);
    return new Promise((resolve, reject) => {
      fs.read(...args, (err, bytesRead, buffer) => {
        if (err) {
          reject(err);
          return;
        } else {
          resolve(
            specialMethods.read.result.serialize({
              bytesRead,
              buffer
            })
          );
        }
      });
    });
  },
  "412d6acc022ae407d26365844f4645ff": serializedArgs => {
    const fs = require("fs");

    const pify = require("pify");

    const { simpleMethods } = require("./defs");

    const args = simpleMethods.realpath.args.deserialize(serializedArgs);
    return pify(fs.realpath.native)(...args).then(result => {
      return simpleMethods.realpath.result.serialize(result);
    });
  },
  c241601cfe3a3466909fad7c7f016807: serializedArgs => {
    const fs = require("fs");

    const pify = require("pify");

    const { simpleMethods } = require("./defs");

    const args = simpleMethods.realpathSync.args.deserialize(serializedArgs);
    return pify(fs.realpathSync.native)(...args).then(result => {
      return simpleMethods.realpathSync.result.serialize(result);
    });
  },
  a2b6c22cc5bba98fe3aafc0962658426: serializedArgs => {
    const fs = require("fs");

    const { specialMethods } = require("./defs");

    const args = specialMethods.write.args.deserialize(serializedArgs);
    return new Promise((resolve, reject) => {
      fs.write(...args, (err, bytesWritten, bufferOrString) => {
        if (err) {
          reject(err);
          return;
        } else {
          resolve(
            specialMethods.write.result.serialize({
              bytesWritten,
              bufferOrString
            })
          );
        }
      });
    });
  },
  "89957f3b6c8ca1444e910f2251764c10": serializedArgs => {
    const fs = require("fs");

    const createSocketUrl = require("run-on-server/socket");

    const { specialMethods } = require("./defs");

    const [filename, options] = specialMethods.watch.args.deserialize(
      serializedArgs
    );
    return createSocketUrl(socket => {
      const listener = (eventType, filename) => {
        const data = JSON.stringify(
          specialMethods.watch.socketMsg.serialize({
            type: "listener",
            eventType,
            data: filename
          })
        );
        socket.send(data);
      };

      const watcher = fs.watch(filename, options, listener);
      watcher.on("change", (eventType, filename) => {
        const data = JSON.stringify(
          specialMethods.watch.socketMsg.serialize({
            type: "watcher",
            eventType: "change",
            data: filename
          })
        );
        socket.send(data);
      });
      watcher.on("close", () => {
        socket.close();
      });
      watcher.on("error", err => {
        const data = JSON.stringify(
          specialMethods.watch.socketMsg.serialize({
            type: "watcher",
            eventType: "error",
            data: err
          })
        );
        socket.send(data);
      });

      socket.onmessage = event => {
        if (event.data === "close") {
          watcher.close();
          socket.close();
        }
      };
    });
  },
  "2dd14d430f33a5c347f5aafd30f10e3d": serializedArgs => {
    const fs = require("fs");

    const createSocketUrl = require("run-on-server/socket");

    const { specialMethods } = require("./defs");

    const [
      filename,
      options
    ] = specialMethods.watchFile.argsOverWire.deserialize(serializedArgs);

    const statsToData = stats => {
      return Object.assign({}, stats, {
        _isBlockDevice: stats.isBlockDevice(),
        _isCharacterDevice: stats.isCharacterDevice(),
        _isDirectory: stats.isDirectory(),
        _isFIFO: stats.isFIFO(),
        _isFile: stats.isFile(),
        _isSocket: stats.isSocket(),
        _isSymbolicLink: stats.isSymbolicLink()
      });
    };

    return createSocketUrl(socket => {
      const listener = (current, previous) => {
        const data = JSON.stringify({
          current: statsToData(current),
          previous: statsToData(previous)
        });
        socket.send(data);
      };

      socket.onmessage = event => {
        if (event.data === "stop") {
          fs.unwatchFile(filename, listener);
          socket.close();
        }
      };

      if (options) {
        fs.watchFile(filename, options, listener);
      } else {
        fs.watchFile(filename, listener);
      }
    });
  }
};
