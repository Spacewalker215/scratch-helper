"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

exports.default = fetchJSON;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XMLHttpRequest = require("./xhr");

function fetchJSON(method, url, data) {
  var sync = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var resolve = function resolve(val) {};
  var reject = function reject(err) {};

  var promise = new _promise2.default(function (innerResolve, innerReject) {
    resolve = innerResolve;
    reject = innerReject;
  });

  var handleError = function handleError(err) {
    if (sync) {
      throw err;
    } else {
      reject(err);
    }
  };

  try {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url, !sync);

    if (!sync) {
      xhr.timeout = 30000;
    }

    xhr.onload = xhr.onreadystatechange = function (event) {
      if (xhr.readyState === 4) {
        resolve(xhr.responseText);
      }
    };

    xhr.onerror = function (event) {
      handleError(new Error(xhr.statusText));
    };

    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.setRequestHeader("Accept", "application/json");
    xhr.send((0, _stringify2.default)(data));

    var returnValue = void 0;
    if (sync) {
      returnValue = JSON.parse(xhr.responseText);
    } else {
      returnValue = promise.then(function (responseData) {
        return JSON.parse(responseData);
      });
    }
    return returnValue;
  } catch (err) {
    handleError(err);
  }
}